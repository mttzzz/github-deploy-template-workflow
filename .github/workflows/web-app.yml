name: deploy template
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
        default: 'web-app'
      helm_chart:
        required: false
        type: string
        default: 'web-app'
      params:
        description: 'Parameters for Helm Chart'
        required: false
        type: string
      with_submodules:
        description: 'Checkout submodules'
        required: false
        type: boolean
        default: false

    secrets:
      HELM_REPO:
        required: true
      REGISTRY_NAME:
          required: true
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
          required: true  
      DO_TOKEN:
          required: true  
      TELEGRAM_TOKEN:
          required: true  
      TELEGRAM_CHAT_ID:
          required: true  
      BUILD_ARGS:
          required: false
      GIT_TOKEN:
          required: false
      AWS_ACCESS_KEY_ID:
          required: true
      AWS_SECRET_ACCESS_KEY:
          required: true        
      PARAMS:
          description: 'Parameters for Helm Chart!!'
          required: false   
       

jobs:
  build-docker:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.export_tag.outputs.tag }}
    steps:
      - name: Checkout deploying repository
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.with_submodules }}
          fetch-depth: 1
          token: ${{ secrets.GIT_TOKEN }}

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_NAME}}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Extract metadata (tags, labels) for Docker
        id: meta        
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.REGISTRY_NAME }}/${{ github.repository }}
          tags: |
           type=raw,value=latest

      - name: Export Docker tag safely
        id: export_tag
        run: |
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–≥ "latest" –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
          echo "tag=latest" >> $GITHUB_OUTPUT
          echo "Using tag: latest"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: fra-1
          AWS_ENDPOINT_URL: 'https://fra1.digitaloceanspaces.com'
        with:
          context: .
          push: true
          tags: ${{ secrets.REGISTRY_NAME }}/${{ github.repository }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ secrets.BUILD_ARGS }}
          cache-from: type=s3,region=fra-1,bucket=docker-cache,endpoint_url=https://fra1.digitaloceanspaces.com,name=${{ github.repository }}
          cache-to: type=s3,region=fra-1,bucket=docker-cache,endpoint_url=https://fra1.digitaloceanspaces.com,name=${{ github.repository }},mode=min

  deploy:
    needs: [build-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          version: 'v1.144.0'
          token: ${{ secrets.DO_TOKEN }}
          
      - name: Save the Kubernetes configuration
        run: |
          mkdir -p $HOME/.kube
          doctl kubernetes cluster kubeconfig save main

      - name: Install Helm
        uses: Azure/setup-helm@v4.0.0

      - name: Login to Helm Repository 
        run: helm repo add --username ${{ secrets.REGISTRY_USERNAME }} --password ${{ secrets.REGISTRY_PASSWORD }} helm_repo ${{secrets.HELM_REPO}}/
    
      - name: Update Helm Repository 
        run: helm repo update helm_repo
        
      - name: Deploy to Kubernetes with Helm
        run: |
              # Decode input parameters
              PARAMS_STR="${{ inputs.params }}"
              echo "Decoding input params: $PARAMS_STR"
              INPUT_PARAMS=$(echo "$PARAMS_STR" | grep -v '^\s*$' | awk '{print "--set", $0}' ORS=' ')
              
              # Decode secret parameters
              SECRET_PARAMS_STR="${{secrets.PARAMS}}"
              echo "Decoding secrets params: $SECRET_PARAMS_STR"
              SECRET_PARAMS=$(echo "$SECRET_PARAMS_STR" | grep -v '^\s*$' | awk '{print "--set", $0}' ORS=' ')
              
              # Combine input and secret parameters
              FULL_PARAMS="$INPUT_PARAMS $SECRET_PARAMS --set app.name=${{ inputs.app_name }} --set app.image=${{ secrets.REGISTRY_NAME }}/${{ github.repository }}:${{ needs.build-docker.outputs.docker_tag }}"
              
              echo "Full Params for Helm: $FULL_PARAMS"
              
              # Deploy using Helm
              helm upgrade ${{ inputs.app_name }} helm_repo/${{ inputs.helm_chart }} -i $FULL_PARAMS
              
              # Restart the deployment to ensure pods are updated
              kubectl rollout restart deployment ${{ inputs.app_name }}

  notify:
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Failure Telegram Message
        if: needs.deploy.result != 'success'
        uses: appleboy/telegram-action@master
        with:
              token: ${{ secrets.TELEGRAM_TOKEN }}
              to: ${{ secrets.TELEGRAM_CHAT_ID }}
              format: markdown
              message: |
                üö® *Deployment Failed* üö®
    
                *${{ github.actor }}* encountered an error deploying to Kubernetes. Please check the GitHub Actions logs for more details.‚ö†Ô∏è
    
                *Repository:* `${{ github.repository }}`
                *Commit Message:* üîó[${{ github.event.head_commit.message }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
                *Check the logs for details:* üîó[Action Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
  
      - name: Send Success Telegram Message
        if: needs.deploy.result == 'success'
        uses: appleboy/telegram-action@master
        with:
              token: ${{ secrets.TELEGRAM_TOKEN }}
              to: ${{ secrets.TELEGRAM_CHAT_ID }}
              format: markdown 
              message: |
                *${{ github.actor }}* deployed some fresh code!üöÄ
  
                *Repository:* `${{ github.repository }}`   
                *Commit Message:* üîó[${{ github.event.head_commit.message }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
                *Check the logs for details:* üîó[Action Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
